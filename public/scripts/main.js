/**
 *
 * Author:  Lisa Irwin
 *
 * Title:  Ratings App
 * Date:  Dec. 6, 2015
 *
 * Credit:  Built this Demo using React Tutorial: Comments App
 * https://facebook.github.io/react/docs/tutorial.html
 */


function formatDate(date) {
  var monthNames = ["January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
  ];

  var d = new Date(date),
      month = monthNames[d.getMonth()],
      day = '' + d.getDate(),
      year = d.getFullYear();

  return month + ' ' + day + ', ' + year;
}

class StarList extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      active: -1 //index for highest active index in startNodes array, zero-based
    }
  }

  clickHandler(index) {
    console.log(index);

    this.setState({active: index });

    this.show

  }

  mouseEnterHandler(index) {
    console.log(index);

    this.setState({active: index });

  }

  mouseLeaveHandler() {
    this.setState({active: -1});
  }


  render() {
    var starNodes = [];

    for (var i = 0; i < 5; i++) {
      var displayRating = i + 1;

      var highlight = i < this.props.numStars ? 'highlight' : '';
      var hover = i <= this.state.active ? 'hover' : '';

      starNodes.push(<div className={"big-star rating-" + displayRating + " " + highlight + " " + hover}
                          key={i}
                          onMouseEnter={this.mouseEnterHandler.bind(this, i)}
                          onMouseLeave={this.mouseLeaveHandler.bind(this, i)}
                          onClick={this.clickHandler.bind(this, i)}

          >

      </div>);
    }

    return (
        <div className="stars-container">
          {starNodes}
          <div className="clear"></div>
        </div>
    );
  }
}

class Rating extends React.Component {
  rawMarkup() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  }

  render() {
    var date = formatDate(this.props.postDate);

    var text = this.props.children ? <span dangerouslySetInnerHTML={this.rawMarkup()} /> : null;
    var title = this.props.title ? <h3 className='title'>{this.props.title}</h3> : null;

    var posted = this.props.postDate ? <h4>Posted on: {date.toString()}</h4> : null;

    return (
      <div className="rating">
        <div className="item-image">
          <img src={this.props.image} />
        </div>
        <div className="item-content">
          <h2 className="item-name">
            {this.props.name} <span className="item-brand">made by <a href='' >{this.props.brand}</a></span>
          </h2>

          {posted}
          <StarList numStars={this.props.numStars} />
          {title}
          {text}
          <RatingForm onRatingSubmit={this.props.onRatingSubmit} />
        </div>
        <div className="clear"></div>
      </div>
    );
  }
}

class RatingBox extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      data: []
    }
  }

  loadRatingsFromServer() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  }

  handleRatingSubmit(rating) {
    var ratings = this.state.data;

    // Optimistically set an id on the new rating. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    rating.postDate = Date.now();

    var newRatings = ratings.concat([rating]);

    this.setState({data: newRatings});

    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: rating,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: ratings});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  }


  componentDidMount() {
    this.loadRatingsFromServer.bind(this)();
    setInterval(this.loadRatingsFromServer.bind(this), this.props.pollInterval);
  }

  render() {
    return (
      <div className="ratingBox">
        <h1>My Beer Ratings</h1>
        <RatingList data={this.state.data} onRatingSubmit={this.handleRatingSubmit.bind(this)}/>
      </div>
    );
  }
}

class RatingList extends React.Component {
  render() {
    var onRatingSubmit = this.props.onRatingSubmit;
    var ratingNodes = this.props.data.map(function(rating) {
      return (
        <Rating key={rating.id}
                postDate={rating.postDate}
                image={rating.image}
                brand={rating.brand}
                name={rating.name}
                author={rating.author}
                numStars={rating.numStars}
                title={rating.title}
                onRatingSubmit={onRatingSubmit}
            >
          {rating.text}
        </Rating>
      );
    });

    return (
      <div className="ratingList">
        {ratingNodes}
      </div>
    );
  }
}

class RatingForm extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      title : '',
      text: ''
    }
  }

  handleTitleChange(e) {
    this.setState({title: e.target.value});
  }

  handleTextChange(e) {
    this.setState({text: e.target.value});
  }

  handleSubmit(e) {
    e.preventDefault();
    var title = this.state.title.trim();
    var text = this.state.text.trim();
    if (!text || !title) {
      return;
    }
    this.props.onRatingSubmit({title: title, text: text});
    this.setState({title: '', text: ''});
  }

  render() {
    return (
      <form className="ratingForm" onSubmit={this.handleSubmit.bind(this)}>
        <input
          type="text"
          placeholder="Headline for Your Review"
          value={this.state.title}
          onChange={this.handleTitleChange.bind(this)}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange.bind(this)}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
}

ReactDOM.render(
  <RatingBox url="/api/ratings" pollInterval={2000} />,
  document.getElementById('content')
);
